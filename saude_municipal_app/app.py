# app.py - VERS√ÉO COMPLETA COM DASHBOARDS INTERATIVOS
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
import seaborn as sns

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Sa√∫de Municipal - PNAHP & PNAES",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown('<h1 class="main-header">üè• An√°lise: Influ√™ncia das Caracter√≠sticas Populacionais nas Pol√≠ticas PNAHP e PNAES</h1>', unsafe_allow_html=True)

# Sidebar com informa√ß√µes da pesquisa
with st.sidebar:
    st.header("üéØ Objetivo da Pesquisa")
    st.info("""
    **Quest√£o:** Qual a influ√™ncia das caracter√≠sticas populacionais 
    nas pol√≠ticas PNAHP (Hospitalar) e PNAES (Especializada) dos 
    munic√≠pios brasileiros?
    
    **Objetivo:** Explorar e descrever esta influ√™ncia atrav√©s 
    de an√°lise de dados.
    """)
    
    st.header("üìã Legenda dos Indicadores")
    st.write("""
    **PNAHP:** Pol√≠tica Nacional de Aten√ß√£o Hospitalar
    - Interna√ß√µes hospitalares
    - Leitos dispon√≠veis
    - Gastos hospitalares
    
    **PNAES:** Pol√≠tica Nacional de Aten√ß√£o Especializada  
    - Procedimentos ambulatoriais
    - Consultas especializadas
    - Exames e terapias
    """)

# Carregar dados de exemplo (substituir por dados reais depois)
@st.cache_data
def carregar_dados_completos():
    """Carrega dados completos para an√°lise"""
    np.random.seed(42)
    n_municipios = 200
    
    # Criar dados mais realistas
    dados = pd.DataFrame({
        'codigo_ibge': range(100000, 100000 + n_municipios),
        'municipio': [f'Munic√≠pio {i}' for i in range(1, n_municipios + 1)],
        'populacao_total': np.random.randint(10000, 800000, n_municipios),
        'populacao_60_mais': np.random.randint(1000, 150000, n_municipios),
        'pib_per_capita': np.random.uniform(8000, 45000, n_municipios),
        'idh': np.random.uniform(0.5, 0.9, n_municipios),
        'regiao': np.random.choice(['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste'], n_municipios),
        'densidade_demografica': np.random.uniform(10, 500, n_municipios)
    })
    
    # Calcular percentuais
    dados['percentual_idosos'] = (dados['populacao_60_mais'] / dados['populacao_total']) * 100
    
    # Criar indicadores de sa√∫de (com rela√ß√µes realistas)
    # Rela√ß√£o positiva com % de idosos
    dados['internacoes_por_1000'] = (
        dados['percentual_idosos'] * 2 + 
        np.random.normal(0, 10, n_municipios) +
        dados['pib_per_capita'] / 1000
    )
    
    # Rela√ß√£o com PIB
    dados['procedimentos_por_1000'] = (
        dados['pib_per_capita'] / 200 + 
        np.random.normal(0, 20, n_municipios) +
        dados['percentual_idosos'] * 1.5
    )
    
    # Gastos hospitalares
    dados['gasto_internacao_per_capita'] = (
        dados['internacoes_por_1000'] * 50 + 
        np.random.normal(0, 100, n_municipios)
    )
    
    # Tipos de procedimentos
    dados['procedimentos_alta_complexidade'] = (
        dados['pib_per_capita'] / 300 + 
        dados['percentual_idosos'] * 2
    )
    
    return dados

# Carregar dados
with st.spinner('Carregando dados para an√°lise...'):
    df = carregar_dados_completos()

# Filtros interativos
st.sidebar.header("üéõÔ∏è Filtros")

regioes = st.sidebar.multiselect(
    "Regi√µes",
    options=df['regiao'].unique(),
    default=df['regiao'].unique()
)

faixa_idosos = st.sidebar.slider(
    "Faixa de % Idosos",
    min_value=float(df['percentual_idosos'].min()),
    max_value=float(df['percentual_idosos'].max()),
    value=(5.0, 25.0)
)

faixa_pib = st.sidebar.slider(
    "Faixa de PIB per Capita (R$)",
    min_value=float(df['pib_per_capita'].min()),
    max_value=float(df['pib_per_capita'].max()),
    value=(10000.0, 40000.0)
)

# Aplicar filtros
df_filtrado = df[
    (df['regiao'].isin(regioes)) &
    (df['percentual_idosos'] >= faixa_idosos[0]) &
    (df['percentual_idosos'] <= faixa_idosos[1]) &
    (df['pib_per_capita'] >= faixa_pib[0]) &
    (df['pib_per_capita'] <= faixa_pib[1])
]

# METRICAS PRINCIPAIS
st.header("üìä Vis√£o Geral dos Munic√≠pios")

col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        "Munic√≠pios Analisados", 
        f"{len(df_filtrado):,}".replace(",", "."),
        delta=f"{len(df_filtrado) - len(df)}" if len(df_filtrado) != len(df) else None
    )

with col2:
    st.metric(
        "Popula√ß√£o M√©dia", 
        f"{df_filtrado['populacao_total'].mean():,.0f}".replace(",", ".")
    )

with col3:
    percentual_idosos_medio = df_filtrado['percentual_idosos'].mean()
    st.metric(
        "% Idosos M√©dio", 
        f"{percentual_idosos_medio:.1f}%"
    )

with col4:
    st.metric(
        "PIB per Capita M√©dio", 
        f"R$ {df_filtrado['pib_per_capita'].mean():,.0f}".replace(",", ".")
    )

# DASHBOARD 1: AN√ÅLISE DA PNAHP (ATEN√á√ÉO HOSPITALAR)
st.header("üè• DASHBOARD 1: An√°lise PNAHP - Aten√ß√£o Hospitalar")

tab1, tab2, tab3 = st.tabs(["Rela√ß√£o com Caracter√≠sticas Populacionais", "An√°lise por Regi√£o", "Indicadores Hospitalares"])

with tab1:
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico 1: Rela√ß√£o Idosos vs Interna√ß√µes
        fig = px.scatter(
            df_filtrado,
            x='percentual_idosos',
            y='internacoes_por_1000',
            size='populacao_total',
            color='pib_per_capita',
            hover_data=['municipio', 'regiao'],
            title='<b>Rela√ß√£o: % Idosos vs Interna√ß√µes Hospitalares</b><br><i>PNAHP - Pol√≠tica Nacional de Aten√ß√£o Hospitalar</i>',
            labels={
                'percentual_idosos': '% Popula√ß√£o com 60+ anos',
                'internacoes_por_1000': 'Interna√ß√µes por 1000 habitantes',
                'pib_per_capita': 'PIB per Capita (R$)',
                'populacao_total': 'Popula√ß√£o Total'
            },
            trendline="lowess"
        )
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
        
        # Estat√≠stica de correla√ß√£o
        correlacao = df_filtrado['percentual_idosos'].corr(df_filtrado['internacoes_por_1000'])
        st.metric("Correla√ß√£o % Idosos √ó Interna√ß√µes", f"{correlacao:.3f}")

    with col2:
        # Gr√°fico 2: PIB vs Gastos Hospitalares
        fig = px.scatter(
            df_filtrado,
            x='pib_per_capita',
            y='gasto_internacao_per_capita',
            size='populacao_total',
            color='percentual_idosos',
            hover_data=['municipio', 'regiao'],
            title='<b>Rela√ß√£o: PIB vs Gastos com Interna√ß√µes</b>',
            labels={
                'pib_per_capita': 'PIB per Capita (R$)',
                'gasto_internacao_per_capita': 'Gasto com Interna√ß√µes per Capita (R$)',
                'percentual_idosos': '% Idosos'
            },
            trendline="ols"
        )
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)

with tab2:
    col1, col2 = st.columns(2)
    
    with col1:
        # Boxplot por regi√£o - Interna√ß√µes
        fig = px.box(
            df_filtrado,
            x='regiao',
            y='internacoes_por_1000',
            color='regiao',
            title='<b>Distribui√ß√£o de Interna√ß√µes por Regi√£o</b>',
            labels={'internacoes_por_1000': 'Interna√ß√µes por 1000 hab.', 'regiao': 'Regi√£o'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Mapa de calor de correla√ß√µes
        variaveis_correlacao = ['percentual_idosos', 'pib_per_capita', 'idh', 'densidade_demografica', 'internacoes_por_1000', 'gasto_internacao_per_capita']
        corr_matrix = df_filtrado[variaveis_correlacao].corr()
        
        fig = px.imshow(
            corr_matrix,
            text_auto=True,
            aspect="auto",
            color_continuous_scale='RdBu',
            title='<b>Matriz de Correla√ß√£o - PNAHP</b>'
        )
        st.plotly_chart(fig, use_container_width=True)

# DASHBOARD 2: AN√ÅLISE DA PNAES (ATEN√á√ÉO ESPECIALIZADA)
st.header("üë®‚Äç‚öïÔ∏è DASHBOARD 2: An√°lise PNAES - Aten√ß√£o Especializada")

tab4, tab5, tab6 = st.tabs(["Acesso a Servi√ßos Especializados", "An√°lise por Porte Populacional", "Efici√™ncia dos Servi√ßos"])

with tab4:
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico: PIB vs Procedimentos
        fig = px.scatter(
            df_filtrado,
            x='pib_per_capita',
            y='procedimentos_por_1000',
            size='populacao_total',
            color='percentual_idosos',
            hover_data=['municipio', 'regiao'],
            title='<b>Rela√ß√£o: PIB vs Procedimentos Ambulatoriais</b><br><i>PNAES - Pol√≠tica Nacional de Aten√ß√£o Especializada</i>',
            labels={
                'pib_per_capita': 'PIB per Capita (R$)',
                'procedimentos_por_1000': 'Procedimentos por 1000 habitantes',
                'percentual_idosos': '% Idosos'
            },
            trendline="lowess"
        )
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        # Gr√°fico: Idosos vs Procedimentos de Alta Complexidade
        fig = px.scatter(
            df_filtrado,
            x='percentual_idosos',
            y='procedimentos_alta_complexidade',
            size='pib_per_capita',
            color='regiao',
            hover_data=['municipio'],
            title='<b>Rela√ß√£o: % Idosos vs Procedimentos de Alta Complexidade</b>',
            labels={
                'percentual_idosos': '% Popula√ß√£o com 60+ anos',
                'procedimentos_alta_complexidade': 'Procedimentos Alta Complexidade',
                'pib_per_capita': 'PIB per Capita (R$)'
            }
        )
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)

with tab5:
    # Classificar munic√≠pios por porte
    df_filtrado['porte'] = pd.cut(
        df_filtrado['populacao_total'],
        bins=[0, 20000, 100000, 500000, float('inf')],
        labels=['Pequeno', 'M√©dio', 'Grande', 'Metr√≥pole']
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig = px.box(
            df_filtrado,
            x='porte',
            y='procedimentos_por_1000',
            color='porte',
            title='<b>Procedimentos Ambulatoriais por Porte do Munic√≠pio</b>'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Gr√°fico de barras agrupadas
        agg_data = df_filtrado.groupby(['porte', 'regiao']).agg({
            'procedimentos_por_1000': 'mean',
            'procedimentos_alta_complexidade': 'mean'
        }).reset_index()
        
        fig = px.bar(
            agg_data,
            x='porte',
            y='procedimentos_por_1000',
            color='regiao',
            barmode='group',
            title='<b>Procedimentos por Porte e Regi√£o</b>'
        )
        st.plotly_chart(fig, use_container_width=True)

# DASHBOARD 3: AN√ÅLISE COMPARATIVA E INSIGHTS
st.header("üìà DASHBOARD 3: An√°lise Comparativa e Insights")

col1, col2 = st.columns(2)

with col1:
    # Compara√ß√£o entre extremos de % idosos
    st.subheader("üìä Compara√ß√£o: Munic√≠pios com Alto vs Baixo % de Idosos")
    
    limite_alto = df_filtrado['percentual_idosos'].quantile(0.75)
    limite_baixo = df_filtrado['percentual_idosos'].quantile(0.25)
    
    alto_idosos = df_filtrado[df_filtrado['percentual_idosos'] >= limite_alto]
    baixo_idosos = df_filtrado[df_filtrado['percentual_idosos'] <= limite_baixo]
    
    comparacao_data = pd.DataFrame({
        'Grupo': ['Alto % Idosos', 'Baixo % Idosos'],
        'Interna√ß√µes/1000': [
            alto_idosos['internacoes_por_1000'].mean(),
            baixo_idosos['internacoes_por_1000'].mean()
        ],
        'Procedimentos/1000': [
            alto_idosos['procedimentos_por_1000'].mean(),
            baixo_idosos['procedimentos_por_1000'].mean()
        ],
        'Gasto Interna√ß√£o per Capita': [
            alto_idosos['gasto_internacao_per_capita'].mean(),
            baixo_idosos['gasto_internacao_per_capita'].mean()
        ]
    })
    
    fig = go.Figure()
    fig.add_trace(go.Bar(
        name='Interna√ß√µes/1000', 
        x=comparacao_data['Grupo'], 
        y=comparacao_data['Interna√ß√µes/1000']
    ))
    fig.add_trace(go.Bar(
        name='Procedimentos/1000', 
        x=comparacao_data['Grupo'], 
        y=comparacao_data['Procedimentos/1000']
    ))
    fig.add_trace(go.Bar(
        name='Gasto per Capita (R$)', 
        x=comparacao_data['Grupo'], 
        y=comparacao_data['Gasto Interna√ß√£o per Capita']
    ))
    
    fig.update_layout(
        title='Compara√ß√£o de Indicadores de Sa√∫de',
        barmode='group',
        height=400
    )
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.subheader("üéØ Insights e Correla√ß√µes")
    
    # Calcular correla√ß√µes
    correl_idosos_intern = df_filtrado['percentual_idosos'].corr(df_filtrado['internacoes_por_1000'])
    correl_pib_proced = df_filtrado['pib_per_capita'].corr(df_filtrado['procedimentos_por_1000'])
    correl_idosos_complexo = df_filtrado['percentual_idosos'].corr(df_filtrado['procedimentos_alta_complexidade'])
    
    # Exibir insights
    st.info(f"""
    **üìã Principais Achados:**
    
    üè• **PNAHP (Hospitalar):**
    - Correla√ß√£o Idosos-Interna√ß√µes: **{correl_idosos_intern:.3f}**
    - {f"‚úÖ Forte influ√™ncia positiva" if correl_idosos_intern > 0.5 else f"üìä Moderada influ√™ncia" if correl_idosos_intern > 0.3 else f"üìâ Fraca influ√™ncia"}
    
    üë®‚Äç‚öïÔ∏è **PNAES (Especializada):**
    - Correla√ß√£o PIB-Procedimentos: **{correl_pib_proced:.3f}**
    - {f"üí∞ Munic√≠pios mais ricos t√™m mais acesso" if correl_pib_proced > 0.3 else f"‚öñÔ∏è Pouca rela√ß√£o com riqueza"}
    - Correla√ß√£o Idosos-Alta Complexidade: **{correl_idosos_complexo:.3f}**
    
    üìà **Diferen√ßa entre extremos:**
    - Munic√≠pios com muitos idosos t√™m **{alto_idosos['internacoes_por_1000'].mean()/baixo_idosos['internacoes_por_1000'].mean():.1f}x** mais interna√ß√µes
    - E **{alto_idosos['gasto_internacao_per_capita'].mean()/baixo_idosos['gasto_internacao_per_capita'].mean():.1f}x** mais gastos hospitalares
    """)

# CONCLUS√ïES FINAIS
st.header("üéì Conclus√µes para as Pol√≠ticas P√∫blicas")

col1, col2 = st.columns(2)

with col1:
    st.subheader("üè• Implica√ß√µes para a PNAHP")
    st.write("""
    1. **Munic√≠pios com popula√ß√£o idosa** necessitam de mais recursos hospitalares
    2. **Investimento em leitos** deve considerar o perfil demogr√°fico
    3. **Hospitais regionais** s√£o essenciais para munic√≠pios menores
    4. **Planejamento baseado em proje√ß√µes** do envelhecimento populacional
    """)

with col2:
    st.subheader("üë®‚Äç‚öïÔ∏è Implica√ß√µes para a PNAES")
    st.write("""
    1. **Distribui√ß√£o desigual** de servi√ßos especializados
    2. **Foco em regi√µes** com menor PIB per capita
    3. **Expans√£o de telemedicina** para √°reas remotas
    4. **Capacita√ß√£o profissional** em geriatria e doen√ßas cr√¥nicas
    """)

# RECOMENDA√á√ïES
st.header("üí° Recomenda√ß√µes para Gestores")

st.success("""
**üéØ A√ß√µes Priorit√°rias:**
1. **Aloca√ß√£o de recursos** baseada em perfil demogr√°fico e socioecon√¥mico
2. **Pol√≠ticas regionais** considerando envelhecimento populacional
3. **Integra√ß√£o entre PNAHP e PNAES** para cuidado cont√≠nuo
4. **Monitoramento cont√≠nuo** atrav√©s de dashboards como este
""")

# Rodap√©
st.markdown("---")
st.markdown("**Desenvolvido para an√°lise da influ√™ncia populacional nas pol√≠ticas PNAHP e PNAES** ‚Ä¢ Dados: Exemplo ilustrativo")

# Bot√£o para expandir dados
with st.expander("üìã Visualizar Dados Completos"):
    st.dataframe(df_filtrado, use_container_width=True)